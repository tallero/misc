#!/usr/bin/env python3

#    comunque
#
#    ----------------------------------------------------------------------
#    Copyright Â© 2019, 2020  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

from subprocess import getoutput as sh
from argparse import ArgumentParser
from sys import stderr

def main():

    # Argument parser
    parser = ArgumentParser(description="Python-like replacement syntax for Bash")

    # Verbose
    verbose = {'args':['--verbose'],
               'kwargs':{'dest': 'verbose',
                         'action': 'store_true',
                         'default': False,
                         'help': 'extended output'}}

    command = {'args':['command'],
               'kwargs':{'action': 'store',
                         'nargs': '?',
                         'default': '',
                         'help': "command to run, with '{}' in place of parameters"}}

    command_args = {'args':['command_args'],
                    'kwargs':{'action': 'store',
                              'nargs': '*',
                              'default': [],
                              'help': "arguments to put into '{}'s (sorted by first appearence)"}}

    parser.add_argument(*verbose['args'], **verbose['kwargs'])
    parser.add_argument(*command['args'], **command['kwargs'])
    parser.add_argument(*command_args['args'], **command_args['kwargs'])

    args = parser.parse_args()

    if args.verbose:
        print(args)

    if not args.command:
        parser.print_help(stderr)
        exit()

    command = args.command.format(*args.command_args)
    print("Command: {}".format(command))
    print(sh(command))

if __name__ == "__main__":
    main()
 
#command='ffmpeg -re -i testsrc.avi -f v4l2 /dev/video1'
