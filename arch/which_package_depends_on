#!/usr/bin/env python3
"""Which package needs this dependency?"""

from argparse import ArgumentParser
from subprocess import getoutput  # as sh
from os import sys

try:
    from pacman import get_info
except Exception as e:
    print("Install python-pacman")

NEWLINE = "\n"
CLEAR = "\033[K"


def parse_output(output, verbose=False):
    """Get output and split lines

    Args:
        output (str): a subprocess.getoutput output

    Returns:
        the same thing split.
    """
    if verbose:
        print(output)
    return output.split(NEWLINE)


def bash(whatever):
    """Get bare minimum ouput for processing.

    Args:
        whatever (str): a bash command

    Returns:
        command output parsed by parse_output.
    """
    output = getoutput(whatever)
    return parse_output(output)


def get_packages_from_file(path):
    """Read packages from a file

    It won't read lines prepended with a dash.

    Args:
        path (str): file path;

    Returns:
        the packages in a python list.
    """
    packages = []
    with open(path, 'r') as file_handler:
        packages_string = file_handler.read()
    for package in packages_string.split(NEWLINE):
        if package and not package.startswith("#"):
            packages.append(package)
    return packages


def find_who_depends_on(file, query):
    """Packages from a file list which depend on queried package

    Args:
        file (str): path of a file;
        query (str): name of a package

    Returns:
        list of packages in the file which depend on package.
    """
    results = []
    packages = get_packages_from_file(file)
    total_pkgs = len(packages)
    for current, package in enumerate(packages):
        print(f"[{current}/{total_pkgs}] {package}", end="\r")
        sys.stdout.write(CLEAR)
        try:
            depends = get_info(package)['Depends On'].split(' ')
            if query in depends:
                results.append(package)
        except TypeError as no_depends_key:
            del no_depends_key
        except Exception as e:
            if str(e).startswith("Failed to get depends:"):
                pass
            else:
                if not "Depends On" in str(e):
                    print(e)

    return results


def main():
    """Main entry point"""

    parser = ArgumentParser()
    arguments = [
      [("packages_file", ),
       {"type": str,
        "help": 'absolute path of input packages file'}],
      [("package", ),
       {"type": str,
        "help": 'package to check which in the list depend on'}],
    ]

    for argument in arguments:
        args, kwargs = argument
        parser.add_argument(*args, **kwargs)

    args = parser.parse_args()

    children = find_who_depends_on(args.packages_file, args.package)

    print(NEWLINE)

    for child in children:
        print(child)

    return children


if __name__ == "__main__":

    main()
